{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nvar _jsxFileName = \"D:\\\\DeveloperSoftware\\\\HyperionDev\\\\Task41-42-NextJSII-III\\\\StarWarsRides\\\\pages\\\\post1.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Layout from \"../components/Layout.js\";\nimport fetch from \"isomorphic-unfetch\";\nimport Typing from 'react-typing-animation';\nimport Error from './_error';\n\nvar Post1 = function Post1(_ref) {\n  var errorCode = _ref.errorCode,\n      planet = _ref.planet;\n\n  if (errorCode) {\n    return __jsx(Error, {\n      statusCode: errorCode,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 8\n      },\n      __self: this\n    });\n  }\n\n  return __jsx(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"black-background\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }, __jsx(Typing, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, __jsx(\"h4\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, \"NAME: \", planet.name), __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, \"CLIMATE: \", planet.climate), __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, \"TERRAIN: \", planet.terrain), __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, \"GRAVITY: \", planet.gravity), __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, \"ORBITAL PERIOD: \", planet.orbital_period), __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, \"ROTATION PERIOD: \", planet.rotation_period), __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, \"POPULATION: \", planet.population), __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, \"Type any letter in the field and click enter to return\"), __jsx(\"input\", {\n    type: \"text\",\n    id: \"one\",\n    onKeyUp: handleKeyPress,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }))));\n};\n\nvar handleKeyPress = function handleKeyPress(event) {\n  if (event.key === 'Enter') {\n    window.location.href = \"/planets\";\n  }\n};\n\nPost1.getInitialProps = function _callee(context) {\n  var id, res, errorCode, planet;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          id = context.query.id;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(fetch(\"https://swapi.co/api/planets/\".concat(id)));\n\n        case 3:\n          res = _context.sent;\n          errorCode = res.statusCode > 200 ? res.statusCode : false;\n          _context.next = 7;\n          return _regeneratorRuntime.awrap(res.json());\n\n        case 7:\n          planet = _context.sent;\n          console.log(\"Fetched planet: \".concat(planet.name));\n          return _context.abrupt(\"return\", {\n            errorCode: errorCode,\n            planet: planet\n          });\n\n        case 10:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default Post1;","map":{"version":3,"sources":["D:/DeveloperSoftware/HyperionDev/Task41-42-NextJSII-III/StarWarsRides/pages/post1.js"],"names":["Layout","fetch","Typing","Error","Post1","errorCode","planet","name","climate","terrain","gravity","orbital_period","rotation_period","population","handleKeyPress","event","key","window","location","href","getInitialProps","context","id","query","res","statusCode","json","console","log"],"mappings":";;;;AAAA,OAAOA,MAAP,MAAmB,yBAAnB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAOC,KAAP,MAAkB,UAAlB;;AAEA,IAAMC,KAAK,GAAG,SAARA,KAAQ,OAAyB;AAAA,MAAvBC,SAAuB,QAAvBA,SAAuB;AAAA,MAAZC,MAAY,QAAZA,MAAY;;AACnC,MAAGD,SAAH,EAAa;AACT,WAAO,MAAC,KAAD;AAAO,MAAA,UAAU,EAAEA,SAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACH;;AACD,SACA,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAWC,MAAM,CAACC,IAAlB,CADA,EAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAaD,MAAM,CAACE,OAApB,CAFA,EAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAaF,MAAM,CAACG,OAApB,CAHA,EAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAaH,MAAM,CAACI,OAApB,CAJA,EAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAoBJ,MAAM,CAACK,cAA3B,CALA,EAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAqBL,MAAM,CAACM,eAA5B,CANA,EAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAgBN,MAAM,CAACO,UAAvB,CAPA,EAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8DARA,EASA;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,EAAE,EAAC,KAAtB;AAA4B,IAAA,OAAO,EAAEC,cAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATA,CADJ,CADJ,CADA;AAiBC,CArBL;;AAuBA,IAAMA,cAAc,GAAC,SAAfA,cAAe,CAACC,KAAD,EAAS;AAC1B,MAAIA,KAAK,CAACC,GAAN,KAAc,OAAlB,EAA0B;AACtBC,IAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAqB,UAArB;AACH;AACJ,CAJD;;AAMAf,KAAK,CAACgB,eAAN,GAAwB,iBAAeC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACdC,UAAAA,EADc,GACRD,OAAO,CAACE,KADA,CACdD,EADc;AAAA;AAAA,2CAEFrB,KAAK,wCAAiCqB,EAAjC,EAFH;;AAAA;AAEdE,UAAAA,GAFc;AAGdnB,UAAAA,SAHc,GAGFmB,GAAG,CAACC,UAAJ,GAAiB,GAAjB,GAAuBD,GAAG,CAACC,UAA3B,GAAwC,KAHtC;AAAA;AAAA,2CAICD,GAAG,CAACE,IAAJ,EAJD;;AAAA;AAIdpB,UAAAA,MAJc;AAMpBqB,UAAAA,OAAO,CAACC,GAAR,2BAA+BtB,MAAM,CAACC,IAAtC;AANoB,2CAQd;AAACF,YAAAA,SAAS,EAATA,SAAD;AAAYC,YAAAA,MAAM,EAACA;AAAnB,WARc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAxB;;AAWA,eAAeF,KAAf","sourcesContent":["import Layout from \"../components/Layout.js\";\r\nimport fetch from \"isomorphic-unfetch\";\r\nimport Typing from 'react-typing-animation';\r\nimport Error from './_error';\r\n\r\nconst Post1 = ({errorCode, planet}) => {\r\n    if(errorCode){\r\n        return <Error statusCode={errorCode} />;\r\n    }\r\n    return(\r\n    <Layout>\r\n        <div className=\"black-background\">\r\n            <Typing>\r\n            <h4>NAME: {planet.name}</h4>\r\n            <p>CLIMATE: {planet.climate}</p>\r\n            <p>TERRAIN: {planet.terrain}</p>\r\n            <p>GRAVITY: {planet.gravity}</p>\r\n            <p>ORBITAL PERIOD: {planet.orbital_period}</p>\r\n            <p>ROTATION PERIOD: {planet.rotation_period}</p>\r\n            <p>POPULATION: {planet.population}</p>\r\n            <p>Type any letter in the field and click enter to return</p>\r\n            <input type=\"text\" id=\"one\" onKeyUp={handleKeyPress} />\r\n            </Typing>\r\n        </div>\r\n    </Layout>\r\n    )\r\n    };\r\n\r\nconst handleKeyPress=(event)=>{\r\n    if (event.key === 'Enter'){\r\n        window.location.href=\"/planets\"\r\n    }\r\n}\r\n\r\nPost1.getInitialProps = async function(context) {\r\n    const{id} = context.query;\r\n    const res = await fetch(`https://swapi.co/api/planets/${id}`);\r\n    const errorCode = res.statusCode > 200 ? res.statusCode : false\r\n    const planet = await res.json();\r\n\r\n    console.log(`Fetched planet: ${planet.name}`);\r\n\r\n    return{errorCode, planet:planet};\r\n};\r\n\r\nexport default Post1;"]},"metadata":{},"sourceType":"module"}